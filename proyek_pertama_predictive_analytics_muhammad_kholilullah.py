# -*- coding: utf-8 -*-
"""Proyek Pertama Predictive Analytics - Muhammad Kholilullah.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10__mBnn71U7bAS1uuNZvhSQcTzDT6d1A

#Memuat Data
"""

# upload kaggle.json
from google.colab import files
files.upload()
# make directory and change permission
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle
# download dataset, choose 'copy api command' from kaggle dataset
!kaggle datasets download -d jainilcoder/online-payment-fraud-detection

!unzip "/content/online-payment-fraud-detection.zip" -d "/content/"

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

dataset = pd.read_csv('onlinefraud.csv')

"""#Exploratory Data Analysis

##Deskripsi Variabel
"""

dataset.info()

dataset.shape

dataset.describe()

dataset.head()

"""#Penanganan *Missing Value*"""

dataset.isnull().sum()

dataset.isna().sum()

"""#Univariate Analysis"""

numerical_features = ['step','amount','oldbalanceOrg','newbalanceOrig','oldbalanceDest','newbalanceDest']
categorical_features = ['type', 'nameOrig', 'nameDest']

dataset.type.unique()

feature = categorical_features[0]
count = dataset[feature].value_counts()
percent = 100*dataset[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

dataset['isFraud'].value_counts()

ct = pd.crosstab(dataset['type'], dataset['isFraud'])
ct

ctf = pd.crosstab(dataset['type'], dataset['isFlaggedFraud'])
ctf

for i in numerical_features:
    plt.xlabel(i)
    dataset[i].plot(kind='hist', bins=5, figsize=(10,5), color='#86bf91', zorder=2, rwidth=0.9)
    plt.show()

"""##Multivariate Analysis"""

sns.pairplot(dataset, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = dataset.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""##Data Preparation

"""

dic = {'PAYMENT': 1, 'TRANSFER':2, "CASH_OUT":3, "DEBIT":4, "CASH_IN":5}
dataset["type"] = dataset["type"].map(dic)

X = dataset.drop(columns=['nameOrig', 'nameDest','isFraud', 'isFlaggedFraud'])
X.head()

from sklearn.model_selection import train_test_split

Y = dataset['isFraud']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=1)

X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

"""#Model Building"""

models = pd.DataFrame(index=['train_acc', 'test_acc'],
                      columns=['RandomForest', 'LogisticRegression', 'XGBoost'])

from sklearn.metrics import accuracy_score
from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix, classification_report

"""##Random Forest"""

from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier(n_estimators=20, random_state=0, max_depth=6)
RF.fit(X_train, Y_train)

RF_Pred = RF.predict(X_test)

models.loc['train_acc','RandomForest'] = accuracy_score(Y_test, RF_Pred)*100

"""##Logistic Regression"""

from sklearn.linear_model import LogisticRegressionCV

LR = LogisticRegressionCV(cv=5, max_iter=500, random_state=0)
LR.fit(X_train, Y_train)

LR_Pred = LR.predict(X_test)

models.loc['train_acc','LogisticRegression'] = accuracy_score(Y_test, LR_Pred)*100

"""##XGBoost"""

from xgboost import XGBClassifier

XGB = XGBClassifier()
XGB.fit(X_train, Y_train)

XGB_Pred = XGB.predict(X_test)

models.loc['train_acc','XGBoost'] = accuracy_score(Y_test, XGB_Pred)*100

"""#Model Evaluation"""

import xgboost
acc = pd.DataFrame(columns=['train', 'test'], index=['RandomForest', 'LogisticRegression', 'XGBoost'])

model_dict = {'RandomForest': RF, 'LogisticRegression': LR, 'XGBoost': XGB}

for name, model in model_dict.items():
    acc.loc[name, 'train'] = accuracy_score(y_true=Y_train, y_pred=model.predict(X_train))*100
    acc.loc[name, 'test'] = accuracy_score(y_true=Y_test, y_pred=model.predict(X_test))*100

acc

"""##Random Forest Evaluation"""

RF_ConfusionMatrix = confusion_matrix(Y_test, RF_Pred)
p = sns.heatmap(pd.DataFrame(RF_ConfusionMatrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Random Forest Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

print('Classification Report')
print(classification_report(Y_test, RF_Pred))

"""##Logistic Regression Evaluation"""

LR_ConfusionMatrix = confusion_matrix(Y_test, LR_Pred)
p = sns.heatmap(pd.DataFrame(LR_ConfusionMatrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Logistic Regression Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

print('Classification Report')
print(classification_report(Y_test, LR_Pred))

"""##XGBoost Evaluation"""

XGB_ConfusionMatrix = confusion_matrix(Y_test, XGB_Pred)
p = sns.heatmap(pd.DataFrame(XGB_ConfusionMatrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('XGBoost Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

print('Classification Report')
print(classification_report(Y_test, XGB_Pred))